
Relatório

O algoritimo consiste nos seguintes passos:

1-Ler arquivo que contém as expressões uma linha por vez
2-Validar a quantidade parenteses, informar expressão inválida ou continuar
3-Remover espaçsos
4-Iterar os elementos da expressão considerando 4 casos:

Caso 1 = ( x + y )
Caso 2 = +
Caso 3 =  ( x - y ) / z
Caso 4 =  z / ( x - y )

5-Para o caso 1:
Criar uma subarvore contendo o operador como raiz e os operandos como filhos desta raiz

6-Para o caso 2:
Criar um subarvore apenas com o operador com raiz

7-Para o caso 3:
Criar uma subarvore contendo o operador (-) como raiz e os operandos x e y como filhos desta raiz
Criar uma subarvore contendo o operador (/) como raiz e o operando z como filho desta raiz
Unir as 2 subarvores

8-Para o caso 4:
Mesmo processo do caso 3, porém alterando a ordem do elementos

9-Unir subarvores geradas pelos operadores
10-Unir o restatante das subarvores
11-Usar a lista gerada pelo caminhamento pós-fixado para calcular a expressão
12-Enquanto percorre a lista é realizado um calculo sempre que for encontrado um operador na lista usando os 2 elementos anteriores com operandos, isto é feito recursivamente
até que a lista tenha somente um elemento.
13-Salvar em um arquivo a expressão, altura da arvore gerada, o caminhamento cetral e em largura, o resultado.


Pseudocodigo do armazenamento da expressão na árvore:

 createTree(expression) {
        expression = expression.removeSpaces();

        LinkedListOfString operands = new LinkedListOfString();
        LinkedListOfString operators = new LinkedListOfString();
        LinkedListOfString roots = new LinkedListOfString();
		
        ArrayList<BinaryTreeOfString> subtrees = new ArrayList<BinaryTreeOfString>();

        for i in expression {
            String token = expression.charAt(i)
            String tokenPlusOne = null;
            String tokenPlusTwo = null;
            String tokenMinusOne = null;
            if (i + 1 <= expression.length() - 1) {
                tokenPlusOne = String.valueOf(expression.charAt(i + 1));
            }
            if (i + 2 <= expression.length() - 1) {
                tokenPlusTwo = String.valueOf(expression.charAt(i + 2));
            }
            if (i - 1 >= 0) {
                tokenMinusOne = String.valueOf(expression.charAt(i - 1));
            }

            if (isOperand(token)) {
                if (isOperand(tokenPlusOne)) {
                    int c = 1;
                    String next = expression.charAt(i + c);
                    boolean hasNext = (i + c < expression.length());
                    while (hasNext && isOperand(next)) {
                        token += next;
                        c++;
                        next = String.valueOf(expression.charAt(i + c));
                    }
                    if (i + c < expression.length()) {
                        i += c - 1;
                    }
                }
                operands.add(token);

            } else if (isOperator(token)) {
                if (isOperand(tokenMinusOne) && tokenPlusOne.equals("(")) {
                    //If Case 4
                    BinaryTreeOfString t = new BinaryTreeOfString();
                    t.addRoot(token);
                    t.addLeft(tokenMinusOne, t.getRoot());

                    String n1 = expression.charAt(i + 2);
                    String op = expression.charAt(i + 3);
                    String n2 = expression.charAt(i + 4);

                    BinaryTreeOfString t2 = new BinaryTreeOfString();
                    t2.addRoot(op);
                    t2.addLeft(n1, t2.getRoot());
                    t2.addRight(n2, t2.getRoot());
                    
                    t.addSubtreeRight(t2, t.getRoot());
                    if (i + 5 < expression.length()) {
                        i += 5;
                    }
                    subtrees.add(t);

                } else if (tokenPlusOne.equals("(")) {
                    //If Case 2
                    BinaryTreeOfString t = new BinaryTreeOfString();
                    t.addRoot(token);
                    subtrees.add(t);
                    roots.add(token);
                } else {
                    operators.add(token);
                }
            } else if (token.equals(")")) {
                if (isOperator(tokenPlusOne) && isOperand(tokenPlusTwo)) {
                    //If Case 3
                    BinaryTreeOfString t = new BinaryTreeOfString();
                    t.addRoot(operators.get(0));
                    t.addLeft(operands.get(0), t.getRoot());
                    t.addRight(operands.get(1), t.getRoot());

                    BinaryTreeOfString t2 = new BinaryTreeOfString();
                    t2.addRoot(tokenPlusOne);
                    t2.addLeft(tokenPlusTwo, t2.getRoot());

                    t2.addSubtreeRight(t, t2.getRoot());

                    subtrees.add(t2);

                    if (i + 2 <= expression.length() - 1) {
                        i += 2;
                    }
                } else if (operands.size() == 2 && operators.size() == 1) {
                    //Case 1
                    BinaryTreeOfString t = new BinaryTreeOfString();
                    t.addRoot(operators.get(0));
                    t.addLeft(operands.get(0), t.getRoot());
                    t.addRight(operands.get(1), t.getRoot());
                    subtrees.add(t);
                }
                operands.clear();
                operators.clear();
            }
        }

        //Uni subtrees
        int i = 1;
        while (subtrees.size() > 1) {
            if (subtrees.size() == 2) {
                BinaryTreeOfString tree = subtrees.get(i);
                BinaryTreeOfString subtreeLeft = subtrees.get(i - 1);
                tree.addSubtreeLeft(subtreeLeft, tree.getRoot());

                if (subtrees.size() > 1) {
                    subtrees.set(i, tree);
                } else {
                    subtrees.set(0, tree);
                }
                subtrees.remove(subtreeLeft);
            } else {
                BinaryTreeOfString tree = subtrees.get(i);
                BinaryTreeOfString subtreeLeft = subtrees.get(i - 1);
                BinaryTreeOfString subtreeRight = subtrees.get(i + 1);

                tree.addSubtreeLeft(subtreeLeft, tree.getRoot());
                tree.addSubtreeRight(subtreeRight, tree.getRoot());

                if (subtrees.size() > 1) {
                    subtrees.set(i, tree);
                } else {
                    subtrees.set(0, tree);
                }
                subtrees.remove(subtreeLeft);
                subtrees.remove(subtreeRight);
            }
        }
        return subtrees.get(0); }
 Pseudocodigo do processamento da árvore

calculateTreeAux(ArrayList<String> list) {
//Calcula
        for i in list {
            if (isOperator(list.get(i))) {
                if (isOperator(list.get(i-1)) || isOperator(list.get(i-2))) {
                    continue;
                }
                double n1 = list.get(i - 2);
                double n2 = list.get(i - 1);
                String op = list.get(i);
                String result = "0";
                if(n1>n2){
                    result = this.calculate(n1, op, n2);
                }else{
                    result = this.calculate(n2, op, n1);
                }
                list.set(i, result);
                list.remove(i - 1);
                list.remove(i - 2);
                i += 1;
            }
        }
	//Calcula as subtrees remanescentes
        if (list.size() > 1) {
            calculateTreeAux(list);
        }
    }
	
    calculateTree(LinkedListOfString tree) {
        ArrayList<String> list = new ArrayList<String>();
		for i in tree {
            list.add(tree.get(i));
        }
        calculateTreeAux(list);
        return list.get(0);
    }
	


calculate(Double op1, String operator, Double op2) {
        double result = 0;
        switch (operator) {
            case "+":
                result = op1 + op2;
                break;
            case "-":
                result = op1 - op2;
                break;
            case "*":
                result = op1 * op2;
                break;
            case "/":
                result = op1 / op2;
                break;
            case "^":
                result = Math.pow(op1, op2);
                break;
        }
        return result;
    }
	



Resultado

( ( 5 + 12 ) + ( ( 10 - 8 ) + 2 ) )
Altura: 3

Caminhamento central:
5,+,12,+,2,+,10,-,8,

Caminhamento em largura:
+,+,+,5,12,2,-,10,8,

Resultado:21.0

( ( 2 + 3 ) * ( 3 / ( 1 - 3 ) ) )
Altura: 3

Caminhamento central:
2,+,3,*,3,/,1,-,3,

Caminhamento em largura:
*,+,/,2,3,3,-,1,3,

Resultado:7.5

( ( ( ( 58 + 33 ) - ( ( 108 - 79 ) + 2 ) ) * ( 9 ^ 3 ) ) + ( ( 5 + 12 ) + ( ( 10 - 8 ) + 2 ) ) )
Altura: 6

Caminhamento central:
58,+,33,-,2,+,108,-,79,*,9,^,3,+,5,+,12,+,2,+,10,-,8,

Caminhamento em largura:
+,+,+,*,+,2,-,-,^,5,12,10,8,+,+,9,3,58,33,2,-,108,79,

Resultado:43761.0

( ( ( ( 2345 + 5890 ) + ( ( 624 / 4 ) - 21 ) ) * ( 546 - 601 ) ) + ( ( 90 * 3 ) + ( 14 - 6 ) ) )
Altura: 6

Caminhamento central:
2345,+,5890,+,2,-,624,/,4,*,546,-,601,+,90,*,3,+,14,-,6,

Caminhamento em largura:
+,+,-,*,*,14,6,+,-,90,3,+,-,546,601,2345,5890,2,/,624,4,

Resultado:461673.0

( ( ( ( 87 * 32 ) / ( 3 ^ 4 ) ) - ( ( 700 - 699 ) + ( 4549 - 7958 ) ) ) + ( ( ( 320 * 67 ) / ( 2 ^ 6 ) ) + ( ( 55 + 67 ) - ( 103 - 94 ) ) ) )
Altura: 8

Caminhamento central:
87,*,32,/,3,^,4,-,700,-,699,+,4549,-,7958,+,320,*,67,/,2,^,6,+,55,+,67,-,103,-,94,

Caminhamento em largura:
-,+,-,/,+,103,94,+,^,55,67,+,*,2,6,-,-,320,67,/,-,4549,7958,*,^,700,699,87,32,3,4,

Resultado:804.4305555555555

( ( ( 8 ^ 4 ) - ( 78 - 43 ) ) + ( ( ( 3452 - 2133 ) + ( ( ( ( 67 * 89 ) - 5343 ) - ( 4 ^ 4 ) ) + ( ( 678 - 345 ) * ( 21 * 21 ) ) ) ) - ( ( ( 4545 - 2913 ) / ( 5 ^ 5 ) ) - ( ( ( 2 ^ 8 ) + ( 44 * 33 ) ) - ( 1234 - 9876 ) ) ) ) )
Altura: 12

Caminhamento central:
8,^,4,-,78,-,43,+,3452,-,2133,+,5,-,67,*,89,-,4,^,4,+,678,-,345,*,21,*,21,-,4545,-,2913,/,5,^,5,-,2,^,8,+,44,*,33,-,1234,-,9876,

Caminhamento em largura:
-,+,-,-,*,1234,9876,/,^,44,33,-,^,2,8,*,-,5,5,+,*,4545,2913,-,-,21,21,+,^,678,345,+,-,4,4,-,-,5,*,^,-,3452,2133,67,89,8,4,78,43,

Resultado:5643.63744

( ( ( 5657 - 6739 ) + ( 3 ^ 5 ) ) + ( ( ( ( 8 ^ 4 ) - ( 78 - 43 ) ) + ( ( 34 * 4 ) + ( 180 - 94 ) ) ) + ( ( ( 8 ^ 4 ) - ( 78 - 43 ) ) + ( ( ( 3452 - 2133 ) + ( ( ( ( 67 * 89 ) - 5343 ) - ( 4 ^ 4 ) ) + ( ( 678 - 345 ) * ( 21 * 21 ) ) ) ) - ( ( ( 4545 - 2913 ) / ( 5 ^ 5 ) ) - ( ( ( 2 ^ 8 ) + ( 44 * 33 ) ) - ( 1234 - 9876 ) ) ) ) ) ) )
Altura: 18

Caminhamento central:
5657,-,6739,+,3,^,5,+,8,^,4,-,78,-,43,+,34,*,4,+,180,-,94,+,8,^,4,-,78,-,43,+,3452,-,2133,+,5,-,67,*,89,-,4,^,4,+,678,-,345,*,21,*,21,-,4545,-,2913,/,5,^,5,-,2,^,8,+,44,*,33,-,1234,-,9876,

Caminhamento em largura:
-,+,-,-,*,1234,9876,/,^,44,33,-,^,2,8,*,-,5,5,+,*,4545,2913,-,-,21,21,+,^,678,345,+,-,4,4,-,-,5,*,+,-,3452,2133,67,89,+,^,78,43,+,-,8,4,-,*,180,94,+,-,34,4,+,^,78,43,-,^,8,4,5657,6739,3,5,

Resultado:4868.88864

( ( ( 4 + 5 ) / 3 ) + ( ( ( 5657 - 6739 ) + ( 3 ^ 5 ) ) + ( ( ( ( 8 ^ 4 ) - ( 78 - 43 ) ) + ( ( 34 * 4 ) + ( 180 - 94 ) ) ) + ( ( ( 8 ^ 4 ) - ( 78 - 43 ) ) + ( ( ( 3452 - 2133 ) + ( ( ( ( 67 * 89 ) - 5343 ) - ( 4 ^ 4 ) ) + ( ( 678 - 345 ) * ( 21 * 21 ) ) ) ) - ( ( ( 4545 - 2913 ) / ( 5 ^ 5 ) ) - ( ( ( 2 ^ 8 ) + ( 44 * 33 ) ) - ( 1234 - 9876 ) ) ) ) ) ) ) )
Altura: 20

Caminhamento central:
3,/,4,+,5,+,5657,-,6739,+,3,^,5,+,8,^,4,-,78,-,43,+,34,*,4,+,180,-,94,+,8,^,4,-,78,-,43,+,3452,-,2133,+,5,-,67,*,89,-,4,^,4,+,678,-,345,*,21,*,21,-,4545,-,2913,/,5,^,5,-,2,^,8,+,44,*,33,-,1234,-,9876,

Caminhamento em largura:
-,+,-,-,*,1234,9876,/,^,44,33,-,^,2,8,*,-,5,5,+,*,4545,2913,-,-,21,21,+,^,678,345,+,-,4,4,-,-,5,*,+,-,3452,2133,67,89,+,^,78,43,+,-,8,4,-,*,180,94,+,-,34,4,+,^,78,43,+,^,8,4,/,-,3,5,3,+,5657,6739,4,5,

Resultado:4868.46528


